function  selTable = saccadePerUnit(spikesByEventBinned, eyeBehStatsByStim, psthParams, eventIDs, paradigm, epochStatsParams, selTable)
% A function which compares saccades between different conditions.

% Inputs:
% - spikesByEventBinned: {stim}{chan}{unit}(trial*bin) structure of binned
% spike counts.
% - eyeBehStatsByStim: a {stim}{trial} structure generated by ClusterFix,
% reporting saccade parameters, including angle in SaccadeClusterValues(:,5))
% - selTable: also an Output, used to report results.

% Important note - spikesByUnitBinned is {chan}{unit}(trial*bin), and
% saccadeTimesStats is saccadeTimesStats.field(trial). This works because
% both the inputs originate from a {event}{trial} structure, and that is
% preserved through out. If this changed, make sure changes are made below

% Use the simpler cell array of names to see which groups have been removed
% during preprocessing due to being absent.
% refStim = {refStruct.stimName}';
% [~, refStimInd, ~] = intersect(refStim, eventIDs);
% refStruct = refStruct(refStimInd);
% eventIDsMerged = [refStruct(:).stimNameMerge]';
% [A, ~, C] = unique(eventIDsMerged);

psthPad = psthParams.psthPre + psthParams.movingWin(1)/2;

targNames = epochStatsParams.(paradigm).targNames;
targLabelList = epochStatsParams.(paradigm).targ;

% For plotIndex
plotParams.stimParamsFilename = epochStatsParams.stimParamsFilename;
plotParams.plotLabels = targLabelList;
plotMat = plotIndex(eventIDs, plotParams);

% Variables
scrambleCount = 2000;
preSacc = 250;
postSacc = 50;
alpha = epochStatsParams.alpha;
nonParametric = epochStatsParams.nonParametric;

% Reorganize spikesByEventBinned{event}{chan}{unit} into
% spikesByUnitBinned{chan}{unit}
chanCount = length(spikesByEventBinned{1});
chanUnits = cellfun('length', spikesByEventBinned{1});

% Create index for table
[unitSelVec, pValVec] = deal(nan(size(selTable,1), length(targNames)));

for group_i = 1:length(targNames)
  
  % Extract relevant variables for this specific group
  targName = targNames{group_i};
  groupLabelsByEvent = plotMat(:, group_i);
  
  % ID Target vs Non-target events
  targInd = max(groupLabelsByEvent);
  targEventInd = groupLabelsByEvent == targInd;                                     % Find the target index
  nonTargEventInd = ~(groupLabelsByEvent == targInd) & groupLabelsByEvent ~= 0;     % 0 is not part of the analysis group.
  
  stimTargetInd = double(targEventInd);
  stimTargetInd(nonTargEventInd) = deal(2);
  
  % Initialize matrix of entries for results.
  trueUnitInd = 1;
  
  for chan_i = 1:chanCount
    for unit_i = 1:chanUnits(chan_i);
      
      % Group Saccade
      targSacc = cell(2, 1);
      
      for stim_i = find(stimTargetInd)'
        
        % Extract saccades for stim
        saccadeData = [eyeBehStatsByStim{stim_i}{:}]';
        saccadetimes = [saccadeData.saccadetimes];
        saccadeDir = [saccadeData.saccadeDirection]';
        
        saccKeep = saccadetimes(1,:) > 0;
        
        saccadetimes = saccadetimes(:, saccKeep) + psthPad;
        saccadeDir = saccadeDir(saccKeep);
        saccadeSpikes = zeros(size(saccadeDir));
        
        % For each saccade, gather spikes which occured during that period.
        for sacc_i = 1:size(saccadetimes,2)
          %       spikeBin = saccadetimes(1, sacc_i):saccadetimes(2, sacc_i); % Use actual sacc times
          spikeBin = saccadetimes(1, sacc_i)-preSacc:saccadetimes(1, sacc_i) + postSacc; % use method in paper
          spikeBin = spikeBin(spikeBin > 0);
          saccadeSpikes(sacc_i) = sum(sum(spikesByEventBinned{stim_i}{chan_i}{unit_i}(:, spikeBin)));
        end
        
        targSacc{stimTargetInd(stim_i)} = [targSacc{stimTargetInd(stim_i)}; saccadeSpikes];
        
      end
      
      % Do the test on the collected bins
      if nonParametric
        [pValVec(trueUnitInd, group_i), ~, ~] = ranksum(targSacc{1}, targSacc{2});
      else
        [~, pValVec(trueUnitInd, group_i), ~] = ttest2(targSacc{1}, targSacc{2});
      end
      
      % Save the difference
      unitSelVec(trueUnitInd, group_i) = mean(targSacc{1}) - mean(targSacc{2});
      
      trueUnitInd = trueUnitInd + 1;
      
    end
  end

  % Add to selTable
  selTable.(sprintf('saccSel_%s_pVal', targName)) = pValVec(:, group_i);
  selTable.(sprintf('saccSel_%s_diff', targName)) = unitSelVec(:, group_i);
  
end