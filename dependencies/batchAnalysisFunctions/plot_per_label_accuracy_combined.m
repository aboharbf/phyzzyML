function figh = plot_per_label_accuracy_combined(decoding_dir_list, params)
% a function which generates a plot containing:
% - single trace per label used in the decoder
% - a mean trace of the overall accuracy
% - vertical lines at important events (denoted below)
% - Relabels X-axis (with numbers below).
% Inputs:
% - decoding_dir_list, a set of directories containing the decoding
% results to be combined.
% - analysisStruct, generated by k_aid_generate_analyses.
% - params, details below

% Figure settings

figStruct.saveFig = 1;      % save the figure in its output directory.
figStruct.closeFig = 0;     % close the figure once it is saved
figStruct.exportFig = 1;    % export figure using export_fig.
figStruct.saveFigData = 1;  % save data with the figure.
figStruct.noOverWrite = 0;  % If a figure is already there, don't make it again.

fontPlotSize = 21;

% Consistent variables across analyses
endTimeFile = load('D:\DataAnalysis\batchAnalysis\NeuralDecodingTB\NaturalSocial\max_zsc\results_NS_catBroad_AllUnits_MUA_MCC\decoding_results_run1.mat');
end_time = endTimeFile.decoding_results.DS_PARAMETERS.binned_site_info.binning_parameters.end_time;

shift = 1300;
points_to_label = [-300, 0, 500, 1000, 1500, 2000, 2500, 3000];
points_for_lines = [0, 2800];


positionInfo = {{50, 0.9, 'left', [1 0 0]};
                {1600, 0.8, 'center', [0 0 1]}; 
                {2750, 0.9, 'right', [0 0 0]}; 
                {1600, 0.9, 'center', [0.5 0.5 0.5]};
                {50, 0.8, 'left', [0 0 1]};
                {2750, 0.8, 'right', [0.5 0.5 0.5]}};
              
points_for_text_x = [50, 1600, 2750];

positionPerLabel = {{1 2 3 4}, {1 2 3 4}, {1 3 5 6}, {1 2 3}};
% subSlicePossibleTitles = {{'Early', 'Late', 'Reward', 'Any'}, {'Early', 'Late', 'Reward', 'Any'}, {'Any', 'Any onlyHT', 'Any noHT', 'onlyHT'}};
subSlicePlotTitle = {{'Stimulus Early', 'Stimulus Presentation', 'Reward', 'Combined'}, {'Stimulus Early', 'Stimulus Presentation', 'Reward', 'Combined'},...
  {'broadCat' 'broadCat + HT', 'broadCat - HT', 'HT - broadCat'}, {'Stimulus Early Active' 'Stimulus Late Active', 'Reward Active'}};

binWidth = 150;
stepSize = 50;

% Label axes correctly - Prepare data for it
the_bin_start_times = 1:stepSize:(end_time - binWidth  + 1);
the_bin_start_times_shift = the_bin_start_times - shift;
bins_to_label = interp1(the_bin_start_times_shift, 1:length(the_bin_start_times_shift), points_to_label);
bins_for_text = interp1(the_bin_start_times_shift, 1:length(the_bin_start_times_shift), points_for_text_x);
x_for_lines = interp1(the_bin_start_times_shift, 1:length(the_bin_start_times_shift), points_for_lines);
xMin = round(interp1(the_bin_start_times_shift, 1:length(the_bin_start_times_shift), points_to_label(1) - 100));

% Per Plot -
coreDirectory = {'D:\DataAnalysis\batchAnalysis\NeuralDecodingTB\NaturalSocial\max_zsc', 'D:\DataAnalysis\batchAnalysis\NeuralDecodingTB\headTurnCon\max_zsc'};
coreDirectoryParadigm = {'NS', 'HTC'};

unitType = {'UnUS', 'MUA'};

% Iterate across
plotCoreNames = {'Broad Categories', 'Categories', 'Social vs non-Social Agents'};
plotSubTypes2Combine = {{'broadCatEarly', 'broadCatLate', 'broadCatReward', '(broadCatAny)'},...
  {'socIntEarly', 'socIntLate', 'socIntReward', 'socIntSelAny'}, ...
  {'(broadCatAny)', '(broadCatAny onlyHT)', '(broadCatAny noHT)', '(nobroadCatAny onlyHT)'}...
  {'(stimEarlySel)', '(stimLateSel)', '(stimRewardSel)'}};
plotCoreNameTag = {'broadCat', 'socInt', 'broadCat HT', 'Epoch Selective'};
fileCoreName = {'broadCat', 'socInt', 'broadCat', 'stim'};
templateDecodingResult = {'D:\DataAnalysis\batchAnalysis\NeuralDecodingTB\NaturalSocial\max_zsc\results_NS_catBroad_AllUnits_MUA_MCC\decoding_results_run1.mat'...
  'D:\DataAnalysis\batchAnalysis\NeuralDecodingTB\NaturalSocial\max_zsc\results_NS_socialCat_AllUnits_UnUS_MCC\decoding_results_run1.mat'...
  'D:\DataAnalysis\batchAnalysis\NeuralDecodingTB\NaturalSocial\max_zsc\results_NS_social_AllUnits_MUA_MCC\decoding_results_run1.mat'};

subSlicePossibleTitles = {{'Early', 'Late', 'Reward', 'Any'}, {'Early', 'Late', 'Reward', 'Any'}, {'Any' 'Any onlyHT', 'Any noHT', 'only HT'}, {'Early', 'Late', 'Reward'}};

for par_i = 1%:length(coreDirectory)
  
  % Make sure the dir exists, and if not, make it.
  plotOutDir = fullfile(coreDirectory{par_i}, 'combo_plot_directory');
  
  if ~exist(plotOutDir, 'dir')
    mkdir(plotOutDir);
  end
  
  for unit_i = 1:length(unitType)
    for plot_i = 1:length(plotCoreNames)
      for subType_i = 4%1:length(plotSubTypes2Combine)
        parPlotName = strjoin([coreDirectoryParadigm(par_i), plotCoreNames(plot_i)], ' ');
        
        templateStruct = load(templateDecodingResult{plot_i});
        
        objectCount = templateStruct.decoding_results.CV_PARAMETERS.num_unique_labels;
        
        plotDataFiles = dir(fullfile(coreDirectory{par_i}, '*_data.mat'));
        plotDataFiles = fullfile({plotDataFiles.folder}, {plotDataFiles.name})';
        
        paradigmComparisonUnitInd = contains(plotDataFiles, parPlotName) & contains(plotDataFiles, unitType{unit_i});

        for sub_plot_i = 1:length(plotSubTypes2Combine{subType_i})
          sub_plot_ind = paradigmComparisonUnitInd & contains(plotDataFiles, plotSubTypes2Combine{subType_i}{sub_plot_i});
          figDataStructs(sub_plot_i) = load(plotDataFiles{sub_plot_ind});
        end
        
        figData = [figDataStructs.figData];
        clear figDataStructs
        analysisStructs = [figData.analysisStruct];
        unitCountPerTrace = cellfun('length', {analysisStructs.sites});
        meanTraceStack = vertcat(figData.meanTrace);
        sigTraceStack = vertcat(figData.sig_bins);
       
        % Initiate the plot
        figTitle = sprintf('Combined Accuracy traces for %s - %s %s', parPlotName, plotCoreNameTag{subType_i}, unitType{unit_i});
        figh = figure('Name', figTitle, 'units', 'normalized', 'outerposition',[0.1042 0.1370 0.6130 0.6843]);
        axesh = axes(figh);
        
        % Plot the significant slices
        sigData = deal(meanTraceStack);
        sigData(~sigTraceStack) = deal(nan);
        
        hold on
        legendLabels = extractAfter(plotSubTypes2Combine{subType_i}, fileCoreName{subType_i});
        if contains(plotSubTypes2Combine{subType_i}{end}, 'no')
          legendLabels{end} = 'only HT';
        end
        legendLabels = strrep(legendLabels, 'Sel', '');
        legendLabels = strrep(legendLabels, ')', '');
        subSlicePossibleTitlesGroup = subSlicePossibleTitles{subType_i};
        traceInfo = positionInfo([positionPerLabel{subType_i}{ismember(subSlicePossibleTitlesGroup, legendLabels)}]);
        % Plot significant trace slices first
        for trace_i = 1:size(sigData,1)
          plot(meanTraceStack(trace_i, :), 'linewidth', 2, 'color', traceInfo{trace_i}{end});
          plot(sigData(trace_i,:), 'linewidth', 5, 'color', traceInfo{trace_i}{end});
        end
        
        % Check if the labels need to be shifted up
        plot_text_y = cellfun(@(x) x{2}, traceInfo);
        bins_for_text_plot = cellfun(@(x) bins_for_text(x{1} == points_for_text_x), traceInfo);
        if max(sigData(:)) > 0.8
          plot_text_y = plot_text_y + 0.05;
        end
        
        % Add legend
        for leg_i = 1:length(legendLabels)
          legendInd = strcmp(subSlicePossibleTitles{subType_i}, legendLabels(leg_i));
          legendText = [subSlicePlotTitle{subType_i}{legendInd} ' (' num2str(unitCountPerTrace(leg_i)) ')'];
          textHandle = text(bins_for_text_plot(leg_i), plot_text_y(leg_i), legendText, 'FontSize', fontPlotSize, 'color', traceInfo{leg_i}{end} , 'HorizontalAlignment', traceInfo{leg_i}{3}, 'FontWeight', 'bold');
        end
        
                  
        ylabel('Decoding Accuracy')
        xlabel('Bin start time')
        xticks(bins_to_label);
        xticklabels(points_to_label);
        title(figTitle)
        
        ylimSize = ylim();
        ylim([ylimSize(1), 1]);
        
        % Calibrate the x axis
        xlim([xMin, length(the_bin_start_times)]);
        for ii = 1:length(x_for_lines)
          plot([x_for_lines(ii), x_for_lines(ii)], ylim(), 'linewidth', 4, 'color', [0.2, 0.2, 0.2])
        end
        axesh.FontSize = fontPlotSize;
        
        plot(xlim(), [1/objectCount 1/objectCount], 'linewidth', 3, 'color', 'k');
        
        saveFigure(plotOutDir, figTitle, [], figStruct, [])
      end
    end
  end
end

disp('y');
